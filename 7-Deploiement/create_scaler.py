#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CR√âATION DU SCALER POUR IMAGES - ACCESSIBILIT√â PMR

Script pour cr√©er et sauvegarder un scaler pour la normalisation des images
dans le cadre du d√©ploiement du mod√®le CNN.
"""

import os
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
from PIL import Image
import logging
import sys

# Configuration du logger
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("create-scaler")

# Configuration des chemins
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TARGET_DIR = os.path.join(BASE_DIR, "..", "5-TravailDL", "computer_vision")
SCALER_PATH = os.path.join(TARGET_DIR, "scaler_images.pkl")

def generate_synthetic_images(n_samples=100, img_size=64):
    """
    G√©n√®re des images synth√©tiques pour cr√©er le scaler
    
    Args:
        n_samples: Nombre d'√©chantillons √† g√©n√©rer
        img_size: Taille des images (carr√©)
        
    Returns:
        np.array: Images synth√©tiques aplaties
    """
    logger.info(f"G√©n√©ration de {n_samples} images synth√©tiques de taille {img_size}x{img_size}")
    
    # Initialisation du tableau pour stocker les images
    images = []
    
    # G√©n√©ration des images synth√©tiques
    for i in range(n_samples):
        # Cr√©ation d'une image al√©atoire
        img_array = np.random.rand(img_size, img_size, 3)
        
        # Normalisation entre 0 et 1
        img_array = img_array.astype('float32') / 255.0
        
        # Aplatissement
        img_flat = img_array.flatten()
        
        # Ajout √† la liste
        images.append(img_flat)
    
    return np.array(images)

def create_and_save_scaler():
    """
    Cr√©e et sauvegarde un scaler pour la normalisation des images
    """
    try:
        # G√©n√©ration des images synth√©tiques
        synthetic_images = generate_synthetic_images(n_samples=200, img_size=64)
        
        # Cr√©ation du scaler
        logger.info("Cr√©ation du scaler...")
        scaler = StandardScaler()
        scaler.fit(synthetic_images)
        
        # Cr√©ation du r√©pertoire cible si n√©cessaire
        os.makedirs(os.path.dirname(SCALER_PATH), exist_ok=True)
        
        # Sauvegarde du scaler
        logger.info(f"Sauvegarde du scaler dans {SCALER_PATH}")
        joblib.dump(scaler, SCALER_PATH)
        
        logger.info("‚úÖ Scaler cr√©√© et sauvegard√© avec succ√®s")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du scaler: {str(e)}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ D√©marrage de la cr√©ation du scaler pour images")
    success = create_and_save_scaler()
    if success:
        logger.info("‚úÖ Processus termin√© avec succ√®s")
    else:
        logger.error("‚ùå √âchec du processus")
        sys.exit(1)
